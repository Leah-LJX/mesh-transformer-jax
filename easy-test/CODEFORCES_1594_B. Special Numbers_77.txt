description:
Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.

Let's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.

Theofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.

Input

The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.

The first and only line of each test case contains two integers n and k (2 ≤ n ≤ 10^9; 1 ≤ k ≤ 10^9).

Output

For each test case, print one integer — the k-th special number in increasing order modulo 10^9+7.

Example

Input


3
3 4
2 12
105 564


Output


9
12
3595374

Note

For n = 3 the sequence is [1,3,4,9...]
solution:
import java.io.*;
import java.util.*;

public class b {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer("");
        int mod = (int) 1e9 + 7;

        int tc = Integer.parseInt(br.readLine());


        for (int tt = 0; tt < tc; tt++) {
            st = new StringTokenizer(br.readLine());
            int factor = Integer.parseInt(st.nextToken());
            int k = Integer.parseInt(st.nextToken());

            long[] value = new long[32];
            long power = 1;

            for (int i = 0; i <= 31; i++) {
                value[i] = power;
                power *= factor;
                power%=mod;

            }

            int answer = 0;

            for (int i = 0; k != 0; i++, k /= 2) {
                if (k % 2 == 1) {
                    answer += value[i];
                    answer%=mod;
                }
            }

            System.out.println(answer);
        }
    }

    private static int gcd(int a, int b) {
        if (a % b == 0) return b;
        else return gcd(b, a % b);
    }
}